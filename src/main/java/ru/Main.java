package ru;

public class Main {
    public static void main(String[] args) {

        /*Задача Практика ООП. Полиморфизм #6. Сложение
        Практика ООП. Полиморфизм #6. Сложение
        Разработайте метод (sumAll), который принимает набор числовых значений и возвращает их сумму в вещественной форме.
        С использованием данного метода выполните следующие сложения:*/

        //Пример 1
        System.out.println("Пример 1: 2 + 3/5 + 2.3");
        int a1 = 2;
        double b1 = 2.3;
        Fraction frac1 = new Fraction(3,5);
        double res = Summ.sumAll(a1,frac1,b1);
        System.out.println("Результат сложения: 2 + 3/5 + 2.3 = " + res);

        //Пример 2
        System.out.println("\nПример 2: 3.6 + 49/12 + 3 + 3/2");
        int a2 = 3;
        double b2 = 3.6;
        Fraction frac2a = new Fraction(49,12);
        Fraction frac2b = new Fraction(3,2);
        double res2 = Summ.sumAll(b2,frac2a,a2,frac2b);
        System.out.println("Результат сложения: 3.6 + 49/12 + 3 + 3/2 = " + res2);

        //Пример 3
        System.out.println("\nПример 3: 1/3 + 1");
        int a3 = 1;
        Fraction frac3 = new Fraction(1,3);
        double res3 = Summ.sumAll(frac3, a3);
        System.out.println("Результат сложения: 1/3 + 1 = " + res3);

        /*Задача Практика ООП. Полиморфизм #5. Дробь это число
        Имеется класс, описывающий Дробь
        Сделайте так, чтобы она была подтипом класса Number, который входит в стандартную редакцию языка Java. Вместо класса, приведенного в задании, можно использовать сделанный ранее самостоятельно класс Дроби.
        Обратите внимание, что необходимо будет реализовать набор абстрактных методов класса Number. Получение всех форм представления Number выполняется делением числителя на знаменатель.*/

        /*
        //дробь
        Fraction f1 = new Fraction(1, 3); // 1/3
        Fraction f2 = new Fraction(2, 5); // 2/5

        //создание как number
        System.out.println("\n Дробь 1: " + f1);
        System.out.println("\n значение: " + f1.intValue());
        System.out.println("\n двойное значение: " + f1.doubleValue());
        System.out.println("\n плавающее значение: " + f1.floatValue());
        System.out.println("\n длина: "+ f1.longValue());

        //арифметическая операция
        Fraction sum = f1.sum(f2);
        System.out.println(sum + " " + sum.doubleValue());
        */

        /*Задача 4
        Практика ООП. *Инкапсуляция #4. Сотрудники и отделы - задание необязательное
        Данное задание не является обязательным для решения. Вы можете выполнить его для дополнительной тренировки навыка по данной теме
        Создайте класс Сотрудник (Employee), которая описывается именем (в строковой форме) и отделом (Department), в котором сотрудник работает, причем у каждого отдела есть название и начальник, который также является Сотрудником. Сотрудник может быть приведен к текстовой форме вида: “Имя работает в отделе Название, начальник которого Имя”. В случае если сотрудник является руководителем отдела, то текстовая форма должна быть “Имя начальник отдела Название”.
        Необходимо гарантировать, что Начальник отдела всегда работает в том отделе, где он начальник.
        Задача считается решенной корректно, если выполняются требования инкапсуляции.
        */
        /*
        //создадим отделы
        Department it = new Department("IT");
        Department miner = new Department("Шахты");

        //создадим сотрудников
        Employee anton = new Employee("Антон Антонов");
        Employee petya = new Employee("Петя Петров");
        Employee pit = new Employee("Пит Питейнов");

        //сотрудники в отдел
        anton.setDepartment(it);
        petya.setDepartment(miner);
        pit.setDepartment(miner);

        //руки подчиненным
        anton.promoteToManager();
        petya.promoteToManager();

        //выведем все это искусство
        System.out.println(anton);
        System.out.println(petya);
        System.out.println(pit);
        */

        /*Задача 3
        Практика ООП. Инкапсуляция #3. Студент
        Создайте класс Студент (Student), которая описывается:

        Имя (name): строка
        Оценки (grades): массив целых чисел
        При создании обязательно указать имя, и опционально набор оценок
        Может возвращать текстовое представление вида “Имя: [оценка1, оценка2,…,оценкаN]” (toString)
        Оценки можно добавлять в любой момент, но нельзя удалять
        Все оценки должны быть в диапазоне от 2 до 5
        Весь набор оценок можно получить в любой момент
        Задача считается решенной корректно, если выполняются требования инкапсуляции.*/

        //студент
        /*
        Student student1 = new Student("Петров Петр");
        System.out.println("Студент без оценок: " + student1);
        // Добавляем оценки
        student1.addGrade(2);
        student1.addGrade(5);
        student1.addGrade(3);
        System.out.println("\nСтуденту насыпали оценок: " + student1); //Петров Петр 2, 5, 3

        //--
        //студент + оценка
        int[] initialGrades = {4, 4, 2, 5, 3};
        Student student2 = new Student("Сидоров Сидр", initialGrades);
        System.out.println("\nЗавели Сидоров Сидр + насыпали оценок: " + student2); //Сидоров Сидр 4, 4, 2, 5, 3

        // Добавляем еще оценок
        student2.addGrade(5);
        student2.addGrade(4);
        student2.addGrade(2);
        System.out.println("\n Добавили оценок Сидоров Сидр : " + student2); //Сидоров Сидр 4, 4, 2, 5, 3, 5, 4, 2

        //Выведеи обоих студено в анализ
        System.out.println("\nПетров Петр: " + student1.getGrades());
        System.out.println("Количество оценок: " + student1.getGradesCount());
        System.out.println("Сидоров Сидр: " + student2.getGrades());
        System.out.println("Количество оценок: " + student2.getGradesCount());

        //Проверим граничные значение 2 и 5
        int[] initialGrades2 = {1, 6};
        Student student3 = new Student("Иванов Иван", initialGrades2);
        System.out.println("\nПроверили граничные значения на Иванов Иван: " + student3); //Иванов Иван IllegalArgumentException("Оценка должна быть в диапазоне от 2 до 5")

        */
    }
}


        /*Задача 2
        Практика ООП. *Инкапсуляция #2. Квадрат - задание необязательное
        Данное задание не является обязательным для решения. Вы можете выполнить его для дополнительной тренировки навыка по данной теме

        Создайте класс Квадрат (Square). Квадрат описывается следующими характеристиками:

        Координата левого верхнего угла по Х: целое число
        Координата левого верхнего угла по Y: целое число
        Длина стороны: целое число (sideLength)
        Создается путем указания координаты x и y левого верхнего угла и размера стороны
        Может быть приведен к строке вида “Квадрат в точке T со стороной N”, где N – длина стороны, а T – результат приведения к строке верхнего левого угла (toString)
        Состояние квадрата можно изменить в любой момент
        Длина стороны обязана быть всегда положительной
        Вместо координат X и Y можно (но не обязательно) использовать класс Точка из задачи 1 (точка координат).

        Задача считается решенной корректно, если выполняются требования инкапсуляции.*/

        // Создаем квадрат
        /*
        Square square = new Square(1, 4, 10);
        System.out.println(square); // Квадрат в точке (1, 4 со стороной 10)

        // Изменим координаты и размер
        square.setX(10);
        square.setY(15);
        square.setSideLength(25);
        System.out.println(square); // Квадрат в точке (10, 15 со стороной 25)
        */


        /*Задача 1
        Практика ООП. Инкапсуляция #1. Дробь
        Создайте класс Дробь (Fraction) со следующими особенностями:

        Имеет числитель (numerator): целое число
        Имеет знаменатель (denominator): целое число
        Дробь может быть создана с указанием числителя и знаменателя
        Объекты дробей не могут изменять свое состояние
        Для числителя задать отрицательное значение можно, в этом случае вся дробь считается отрицательной
        Для знаменателя отрицательное значение недопустимо
        Может вернуть строковое представление вида “числитель/знаменатель” (toString)
        Может выполнять операции сложения, вычитания с другой Дробью или целым числом. Результатом операции должна быть новая Дробь
        Затем необходимо выполнить следующие задачи:

        Создать несколько экземпляров дробей
        Посчитать f1.sum(f2).sum(f3).minus(5), где f1 это одна треть, f2 две пятых, а f3 это семь восьмых*/

        /*
        // Создать несколько экземпляров дробей: где f1 это одна треть, f2 две пятых, а f3 это семь восьмых
        Fraction f1 = new Fraction(1, 3); // 1/3
        Fraction f2 = new Fraction(2, 5); // 2/5
        Fraction f3 = new Fraction(7, 8); // 7/8

        // Посчитать f1.sum(f2).sum(f3).minus(5)
        Fraction result = f1.sum(f2).sum(f3).minus(5);

        // Результат
        System.out.println("f1 = " + f1);
        System.out.println("f2 = " + f2);
        System.out.println("f3 = " + f3);
        System.out.println("f1.sum(f2).sum(f3).minus(5) = " + result);
         */